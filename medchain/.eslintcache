[{"C:\\Users\\lenti\\Documents\\GitHub\\medchain\\medchain\\src\\components\\doctors\\doctor.js":"1"},{"size":4088,"mtime":1607437732554,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"oq9wfg","C:\\Users\\lenti\\Documents\\GitHub\\medchain\\medchain\\src\\components\\doctors\\doctor.js",["7"],"import React, { useState, useEffect } from 'react';\r\nimport { DoctorBackground, FormWrapper, Blockchain, BlockchainWrapper,CloseIcon, Paragraph, Line, Modal, Tags } from './doctor.elements';\r\nimport  MedicalForm  from './medicalform';\r\nimport QrReader from 'react-qr-reader';\r\n\r\n\r\nconst Doctor = props => {\r\n\r\n    console.log(props.id);\r\n    const [key, setKey] = useState('');\r\n    const [blockchain,setBlockchain] = useState([]);\r\n    const [clicked, setClicked] = useState(false);\r\n    const [remount,setRemount] = useState(false);\r\n    const [token, setToken] = useState([]);\r\n\r\n    useEffect(()=> {\r\n        if (remount && clicked){\r\n            getData();\r\n            setRemount(false);\r\n        }\r\n    });\r\n\r\n    const handleScan = data => {\r\n        if (data) {\r\n            let user = JSON.parse(data);\r\n            setToken([user.pubkey,user.sig]);\r\n            setClicked(true);\r\n            if(user.pubkey.length > 0){\r\n                setKey(user.pubkey);\r\n                setRemount(true);\r\n            }\r\n                console.log('scanned');\r\n        }\r\n      }\r\n      \r\n  \r\n    const handleError = err => {\r\n        console.error(err);\r\n    }\r\n   \r\n    const handleRemount = (data) =>{\r\n        setRemount(data);\r\n    }\r\n\r\n    const getData = () =>{\r\n        fetch('/record/chain/' + key, {\r\n            method: 'GET',\r\n            headers: {  \r\n                'Content-Type': 'application/json',\r\n            },\r\n            })\r\n            .then(response => {\r\n                if(response.ok){\r\n                    setClicked(true);  \r\n                }\r\n                if(!response.ok){\r\n                    setClicked(false); \r\n                    setKey('');  \r\n                    alert('ID could not be found');              \r\n                }\r\n                console.log(response.status);\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                setBlockchain(data);\r\n                console.log('Success:', data);\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error:', error);\r\n              });\r\n    }\r\n\r\n    const closeModal = () =>{\r\n        setKey('');\r\n        setClicked(false);\r\n        setToken([]);\r\n    }\r\n\r\n    const onlyOneBlock = (data) =>{\r\n        setClicked(data);\r\n    }\r\n   \r\n    return (\r\n        <DoctorBackground>\r\n                <FormWrapper>\r\n                    <MedicalForm onlyOneBlock={onlyOneBlock} check={clicked} pubkey={token[0]} sig={token[1]} handleRemount={handleRemount} />\r\n                </FormWrapper>\r\n                <Modal bool={clicked}>  \r\n                    <CloseIcon onClick={closeModal}> X </CloseIcon>\r\n                    {\r\n                    blockchain.map((data, index) => {\r\n                        return( \r\n                        <Blockchain key={index}> \r\n                                <Line>Record: {data.index}</Line> \r\n                                <Paragraph> \r\n                                    <Line> <Tags>TIMESTAMP:</Tags> {data.timestamp}</Line>\r\n                                    <Line> <Tags> HOSPITAL:</Tags> {data.hospital}</Line>\r\n                                    <Line><Tags>DIAGNOSIS:</Tags>  {data.diagnosis}</Line>\r\n                                    <Line><Tags>PERSCRIPTION:</Tags>  {data.perscription}</Line>\r\n                                    <Line><Tags>COMMENT:</Tags>  {data.comment}</Line>\r\n                                </Paragraph>\r\n                            </Blockchain>\r\n                        )})\r\n                    }\r\n                </Modal>\r\n                <BlockchainWrapper>\r\n                    {!clicked ? <div style={{height:\"300px\", width: \"300px\" }}>\r\n                        <QrReader\r\n                            delay={300}\r\n                            onError={handleError}\r\n                            onScan={handleScan}\r\n                            style={{ width: '100%' }}\r\n                        />\r\n                    </div> : null}\r\n                </BlockchainWrapper>\r\n        </DoctorBackground>\r\n    )\r\n}\r\n\r\nexport default Doctor\r\n",{"ruleId":"8","severity":1,"message":"9","line":16,"column":5,"nodeType":"10","endLine":16,"endColumn":14,"suggestions":"11"},"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setRemount'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [remount, clicked, getData] as a second argument to the useEffect Hook.","Identifier",["12"],{"desc":"13","fix":"14"},"Add dependencies array: [remount, clicked, getData]",{"range":"15","text":"16"},[711,711],", [remount, clicked, getData]"]
[{"C:\\Users\\lenti\\Documents\\GitHub\\medchain\\medchain\\src\\components\\doctors\\medicalform.js":"1","C:\\Users\\lenti\\Documents\\GitHub\\medchain\\medchain\\src\\components\\patient\\patient.js":"2","C:\\Users\\lenti\\Documents\\GitHub\\medchain\\medchain\\src\\components\\doctors\\doctor.js":"3","C:\\Users\\lenti\\Documents\\GitHub\\medchain\\medchain\\src\\components\\qrcode\\scanner.js":"4","C:\\Users\\lenti\\Documents\\GitHub\\medchain\\medchain\\src\\components\\doctors\\doctor.elements.js":"5","C:\\Users\\lenti\\Documents\\GitHub\\medchain\\medchain\\src\\index.js":"6","C:\\Users\\lenti\\Documents\\GitHub\\medchain\\medchain\\src\\components\\LogIn\\ButtonElement.js":"7","C:\\Users\\lenti\\Documents\\GitHub\\medchain\\medchain\\src\\components\\doctors\\find.elements.js":"8","C:\\Users\\lenti\\Documents\\GitHub\\medchain\\medchain\\src\\components\\LogIn\\login.elements.js":"9","C:\\Users\\lenti\\Documents\\GitHub\\medchain\\medchain\\src\\components\\patient\\patient.elements.js":"10","C:\\Users\\lenti\\Documents\\GitHub\\medchain\\medchain\\src\\components\\LogIn\\login.js":"11"},{"size":3458,"mtime":1607305768196,"results":"12","hashOfConfig":"13"},{"size":3195,"mtime":1607296597611,"results":"14","hashOfConfig":"13"},{"size":5087,"mtime":1607305563049,"results":"15","hashOfConfig":"13"},{"size":585,"mtime":1607296274345,"results":"16","hashOfConfig":"13"},{"size":3045,"mtime":1607302479914,"results":"17","hashOfConfig":"13"},{"size":412,"mtime":1607123559329,"results":"18","hashOfConfig":"13"},{"size":340,"mtime":1606833963328,"results":"19","hashOfConfig":"13"},{"size":558,"mtime":1606804251511,"results":"20","hashOfConfig":"13"},{"size":3029,"mtime":1607224268743,"results":"21","hashOfConfig":"13"},{"size":2211,"mtime":1607295051637,"results":"22","hashOfConfig":"13"},{"size":2655,"mtime":1607305576974,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"oq9wfg",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"37"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},"C:\\Users\\lenti\\Documents\\GitHub\\medchain\\medchain\\src\\components\\doctors\\medicalform.js",["50"],"C:\\Users\\lenti\\Documents\\GitHub\\medchain\\medchain\\src\\components\\patient\\patient.js",[],"C:\\Users\\lenti\\Documents\\GitHub\\medchain\\medchain\\src\\components\\doctors\\doctor.js",["51","52","53","54","55","56","57","58","59"],"import React, { useState, useEffect } from 'react';\r\nimport { DoctorBackground, FormWrapper, Blockchain, BlockchainWrapper,CloseIcon, Paragraph, Line, Modal, Tags } from './doctor.elements';\r\nimport  MedicalForm  from './medicalform';\r\nimport { Input, InputButton } from './find.elements'\r\nimport testjson from './test.json';\r\nimport QrReader from 'react-qr-reader';\r\n\r\n\r\nconst Doctor = props => {\r\n\r\n    console.log(props.id);\r\n    const [key, setKey] = useState('');\r\n    const [blockchain,setBlockchain] = useState([]);\r\n    const [clicked, setClicked] = useState(false);\r\n    const data1 = 'cadd75339625c5401af9b5cce0b0d402f56c44891001a885ca93f8f24b48079f'\r\n    const data2 = 'f0a781a8380a89ab8db7a6aade46d63d6d8fffc12af8242fbfb41588481095e5';\r\n    const [stat,setStat]= useState('');\r\n    const [remount,setRemount] = useState(false);\r\n    const [token, setToken] = useState([]);\r\n\r\n    useEffect(()=> {\r\n        if (remount && clicked){\r\n            getData();\r\n            setRemount(false);\r\n        }\r\n    });\r\n\r\n    const handleScan = data => {\r\n        if (data) {\r\n            let temp = JSON.parse(data);\r\n            setToken([temp.pubkey,temp.sig]);\r\n            setClicked(true);\r\n            if(temp.pubkey.length > 0){\r\n                setKey(temp.pubkey);\r\n                setRemount(true);\r\n            }\r\n            console.log('scanned');\r\n        }\r\n      }\r\n      \r\n  \r\n      const handleError = err => {\r\n        console.error(err);\r\n      }\r\n   \r\n    const handleRemount = (data) =>{\r\n        setRemount(data);\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        getData();\r\n        e.preventDefault();\r\n    }\r\n\r\n    const getData = () =>{\r\n        fetch('/record/chain/' + key, {\r\n            method: 'GET',\r\n            headers: {  \r\n                'Content-Type': 'application/json',\r\n            },\r\n            })\r\n            .then(response => {\r\n                setStat(response.status);\r\n                if(response.ok){\r\n                    setClicked(true);\r\n                    //the useEffect function can't call getData() if key is empty\r\n                    //setKey('');   \r\n                }\r\n                if(!response.ok){\r\n                    setClicked(false); \r\n                    setKey('');  \r\n                    alert('ID could not be found');              \r\n                    \r\n                }\r\n                console.log(response.status);\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                setBlockchain(data);\r\n                console.log('Success:', data);\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error:', error);\r\n              });\r\n\r\n    }\r\n\r\n    const handleChange = (event) =>{\r\n        setKey(event.target.value);\r\n        console.log('change handled');\r\n    }\r\n    const closeModal = () =>{\r\n        setKey('');\r\n        setClicked(false);\r\n        setToken([]);\r\n    }\r\n\r\n    const onlyOneBlock = (data) =>{\r\n        setClicked(data);\r\n    }\r\n   \r\n    return (\r\n        <DoctorBackground>\r\n                <FormWrapper>\r\n                    <MedicalForm onlyOneBlock={onlyOneBlock} check={clicked} pubkey={token[0]} sig={token[1]} handleRemount={handleRemount} />\r\n                    {console.log(key)}\r\n                </FormWrapper>\r\n                <Modal bool={clicked}>  \r\n                    <CloseIcon onClick={closeModal}> X </CloseIcon>\r\n                    {blockchain.map(function(data,index) {\r\n                    return( \r\n                       <Blockchain key={index}> \r\n                                <Line>Record: {data.index}</Line> \r\n                            <Paragraph> \r\n                                <Line> <Tags>TIMESTAMP:</Tags> {data.timestamp}</Line>\r\n                                <Line> <Tags> HOSPITAL:</Tags> {data.hospital}</Line>\r\n                                <Line><Tags>DIAGNOSIS:</Tags>  {data.diagnosis}</Line>\r\n                                <Line><Tags>PERSCRIPTION:</Tags>  {data.perscription}</Line>\r\n                                <Line><Tags>COMMENT:</Tags>  {data.comment}</Line>\r\n                                {/* <Line><Tags>PREVIOUS HASH:</Tags>  {data.previous_hash}</Line>          */}\r\n                            </Paragraph>\r\n                        </Blockchain>\r\n                    )})}\r\n                </Modal>\r\n            \r\n                <BlockchainWrapper>\r\n                    {/* <Input placeholder=\"ID\" value={key} onChange={handleChange}/>\r\n                    <InputButton type='submit' value=\"Find Patients Blockchain\" />   */}\r\n                        {!clicked ? <div style={{height:\"300px\", width: \"300px\" }}>\r\n                            <QrReader\r\n                                delay={300}\r\n                                onError={handleError}\r\n                                onScan={handleScan}\r\n                                style={{ width: '100%' }}\r\n                            />\r\n                        </div> : null}\r\n                </BlockchainWrapper>\r\n        </DoctorBackground>\r\n    )\r\n}\r\n\r\nexport default Doctor\r\n","C:\\Users\\lenti\\Documents\\GitHub\\medchain\\medchain\\src\\components\\qrcode\\scanner.js",[],"C:\\Users\\lenti\\Documents\\GitHub\\medchain\\medchain\\src\\components\\doctors\\doctor.elements.js",[],"C:\\Users\\lenti\\Documents\\GitHub\\medchain\\medchain\\src\\index.js",[],["60","61"],"C:\\Users\\lenti\\Documents\\GitHub\\medchain\\medchain\\src\\components\\LogIn\\ButtonElement.js",[],"C:\\Users\\lenti\\Documents\\GitHub\\medchain\\medchain\\src\\components\\doctors\\find.elements.js",[],"C:\\Users\\lenti\\Documents\\GitHub\\medchain\\medchain\\src\\components\\LogIn\\login.elements.js",[],"C:\\Users\\lenti\\Documents\\GitHub\\medchain\\medchain\\src\\components\\patient\\patient.elements.js",["62"],"import styled from 'styled-components';\r\nimport token from '../../media/blocksvg.svg'\r\nimport photo from '../../media/photo.png'\r\n\r\nexport const PatientBackground = styled.div`\r\n    background: #EFEFE8FF;\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    width: 100%;\r\n    height: 100vh;\r\n    z-index: 1;\r\n` \r\nexport const QRWrapper = styled.div`\r\n    display:flex;\r\n    position: relative;\r\n    background-repeat:no-repeat;\r\n    width: 450px;\r\n    height: 300px;\r\n    border: none;\r\n    background-size: contain;\r\n    background-position: center center;\r\n    text-decoration: none;\r\n    margin-left: 8px;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\n\r\nexport const BackgroundWrapper = styled.div`\r\n    display:flex;\r\n    flex-direction: row;\r\n`\r\n\r\nexport const Logo = styled.svg`\r\n    background-image:url(${token});\r\n    display: flex;\r\n    position: relative;\r\n    background-repeat:no-repeat;\r\n    width: 35px;\r\n    height: 35px;\r\n    background-position: center center; \r\n    margin-bottom: 2.5rem;\r\n    margin-right: 10px;\r\n`\r\n\r\nexport const BlockchainWrapper = styled.div`\r\n    background: white;\r\n    height: 600px;\r\n    width: 50vw;\r\n    overflow-y: scroll;\r\n    display:flex;\r\n    flex-direction: column;\r\n    align-items: center; \r\n`\r\n\r\nexport const LogoWrp = styled.div`\r\n    display: flex;\r\n    position: relative;\r\n    font-family: Montserrat;\r\n    font-size: 1.9rem;\r\n    font-weight: 500;\r\n    justify-content: center;\r\n    color: white;\r\n    margin-top: 1rem;\r\n    color: black;\r\n`\r\n\r\nexport const PatientInfo = styled.div`\r\n    background: white;\r\n`\r\n\r\nexport const InfoWrapper = styled.div`\r\n    background: white;\r\n    width: 480px;\r\n    height: 280px;\r\n    color: black;\r\n    font-size: 7px;\r\n    text-align: left;\r\n    padding-left: 15px;\r\n    padding-top: 10px;\r\n    font-family: 'Montserrat', sans-serif;\r\n    font-weight: 500;\r\n`\r\n\r\n\r\nexport const Blockchain = styled.div `\r\n    height: 100px;\r\n    width: 100px;   \r\n`\r\n\r\nexport const Tokens = styled.h1 `\r\n    font-size: 15px;\r\n    word-wrap: break-word;\r\n    width: 400px;\r\n    height: max-content;\r\n    margin: 5px;\r\n    color: #495464;\r\n    padding-top: 10px;\r\n`","C:\\Users\\lenti\\Documents\\GitHub\\medchain\\medchain\\src\\components\\LogIn\\login.js",["63","64"],"import React, {useState} from 'react'\r\nimport { Container, HeaderbtnWrapper, Logo, LogoContainer, VideoBg, Background, Content ,QRWrapper} from './login.elements';\r\nimport sample from '../../video/video.mp4';\r\nimport { Button } from './ButtonElement'\r\nimport { FormWrapper, Select } from '../register/form.elements'\r\nimport { Searchwrapper, Input } from '../Searchbar/searchbar.elements'\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Scanner } from \"../qrcode/scanner\";\r\nconst axios = require('axios');\r\n\r\n\r\nexport const Login = props => {\r\n    const [hover, setHover] = useState(false)\r\n    const [key, setKey] = useState(\"\");\r\n    const [opt, setOpt] = useState(\"doctor\");\r\n    const [auth, setAuth] = useState(false);\r\n    const onHover = () => {\r\n        setHover(!hover)\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        axios.get(`/search/${opt}/${key}`).then(res => {\r\n            if (res.data.error) { alert(res.data.error); }\r\n            else { setAuth(true); }\r\n        });\r\n        props.handleAlter(key);\r\n    }\r\n\r\n\r\n    return (\r\n        <Container>\r\n            { auth === true ? opt === \"doctor\" ? <Redirect to=\"/doctor\"/> : <Redirect to=\"/patient/:id\"/>: null}\r\n            <Background>\r\n                <VideoBg autoPlay loop muted src={sample} type='video/mp4' />\r\n            </Background>\r\n            <Content onSubmit={handleSubmit}>\r\n                <LogoContainer>\r\n                    <Logo/> MedChain\r\n                </LogoContainer>\r\n                <Searchwrapper>\r\n                        <Input type='text' \r\n                               placeholder='Please enter your key...'   \r\n                               value={key} \r\n                               onChange={ e => setKey(e.target.value)}\r\n                        />\r\n                </Searchwrapper>\r\n                <div>\r\n                    <FormWrapper onSubmit={handleSubmit}>\r\n                        <Select value={opt} onChange={e => setOpt(e.target.value)}>\r\n                            <option value=\"doctor\"> Doctor </option>\r\n                            <option value=\"patient\"> Patient </option>\r\n                        </Select>\r\n                    </FormWrapper>\r\n                </div>\r\n                <HeaderbtnWrapper>\r\n\r\n                    <Button  type='submit' value=\"Find Blockchain\"\r\n                        onMouseEnter={onHover} \r\n                        onMouseLeave={onHover}\r\n                    />\r\n                </HeaderbtnWrapper>\r\n                {/* <QRWrapper>\r\n                    <Scanner/>\r\n                </QRWrapper>*/}\r\n            </Content>\r\n        </Container>\r\n    )\r\n};",{"ruleId":"65","severity":1,"message":"66","line":20,"column":5,"nodeType":"67","endLine":20,"endColumn":14,"suggestions":"68"},{"ruleId":"69","severity":1,"message":"70","line":4,"column":10,"nodeType":"67","messageId":"71","endLine":4,"endColumn":15},{"ruleId":"69","severity":1,"message":"72","line":4,"column":17,"nodeType":"67","messageId":"71","endLine":4,"endColumn":28},{"ruleId":"69","severity":1,"message":"73","line":5,"column":8,"nodeType":"67","messageId":"71","endLine":5,"endColumn":16},{"ruleId":"69","severity":1,"message":"74","line":15,"column":11,"nodeType":"67","messageId":"71","endLine":15,"endColumn":16},{"ruleId":"69","severity":1,"message":"75","line":16,"column":11,"nodeType":"67","messageId":"71","endLine":16,"endColumn":16},{"ruleId":"69","severity":1,"message":"76","line":17,"column":12,"nodeType":"67","messageId":"71","endLine":17,"endColumn":16},{"ruleId":"65","severity":1,"message":"77","line":21,"column":5,"nodeType":"67","endLine":21,"endColumn":14,"suggestions":"78"},{"ruleId":"69","severity":1,"message":"79","line":50,"column":11,"nodeType":"67","messageId":"71","endLine":50,"endColumn":23},{"ruleId":"69","severity":1,"message":"80","line":88,"column":11,"nodeType":"67","messageId":"71","endLine":88,"endColumn":23},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"69","severity":1,"message":"85","line":3,"column":8,"nodeType":"67","messageId":"71","endLine":3,"endColumn":13},{"ruleId":"69","severity":1,"message":"86","line":2,"column":90,"nodeType":"67","messageId":"71","endLine":2,"endColumn":99},{"ruleId":"69","severity":1,"message":"87","line":8,"column":10,"nodeType":"67","messageId":"71","endLine":8,"endColumn":17},"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setId'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [props.check, props.pubkey, bool] as a second argument to the useEffect Hook.","Identifier",["88"],"no-unused-vars","'Input' is defined but never used.","unusedVar","'InputButton' is defined but never used.","'testjson' is defined but never used.","'data1' is assigned a value but never used.","'data2' is assigned a value but never used.","'stat' is assigned a value but never used.","React Hook useEffect contains a call to 'setRemount'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [remount, clicked, getData] as a second argument to the useEffect Hook.",["89"],"'handleSubmit' is assigned a value but never used.","'handleChange' is assigned a value but never used.","no-native-reassign",["90"],"no-negated-in-lhs",["91"],"'photo' is defined but never used.","'QRWrapper' is defined but never used.","'Scanner' is defined but never used.",{"desc":"92","fix":"93"},{"desc":"94","fix":"95"},"no-global-assign","no-unsafe-negation","Add dependencies array: [props.check, props.pubkey, bool]",{"range":"96","text":"97"},"Add dependencies array: [remount, clicked, getData]",{"range":"98","text":"99"},[1034,1034],", [props.check, props.pubkey, bool]",[1016,1016],", [remount, clicked, getData]"]